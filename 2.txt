#include <iostream>
#include<bits/stdc++.h>
#include<chrono>
int step =0;
using namespace std;

int rec(int w,int wt[] , int val[], int n)
{
    if(n==0 || w==0)
        return 0;
    if(wt[n-1]>w)
        return rec(w,wt,val,n-1);
    else    
        return max((val[n-1]+rec(w-wt[n-1],wt,val,n-1)),rec(w,wt,val,n-1));
}
// void printSelected(int dp[][151],int n,int w,int wt[])
// {
//     int temp = n;
//     int x[n];
//     // int x[]={0,0,0,0,0};
//     for(int k =0;k<n;k++)
//     {
//         x[k]=0;
//     }
//     int i =n,j=w;
//     while(i!=0 || j!=0)
//     {
//         if(dp[i][j]!=dp[i-1][j])
//             {
//                 j=j-wt[i-1];
//                 x[i-1] = 1;
//             }
//             i--;
//     }
//     cout<<"\nSelected Items: \t";
//     for(int k =0;k<temp;k++)
//     {
//         cout<<x[k]<<" ";
//     }
// }
int knapSack(int w,int wt[] , int val[], int n)
{
    int dp[n+1][w+1];
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=0;
    }
    for(int i=0;i<=w;i++)
    {
        dp[0][i]=0;
    }
    for(int i = 1;i<=n;i++)
    {
        for(int j = 1;j<=w;j++)
        {
            if(wt[i-1]>j)
                dp[i][j] = dp[i-1][j];
            else
                dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
        }
    }
    
    // for(int i=0;i<=n;i++)
    // {
    //     for(int j=0;j<=w;j++)
    //     {
    //         cout<<dp[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }
    
    // printSelected(dp,n,w,wt);
    
    return dp[n][w];
}

int main()
{
    int val[] = {1,6,18,22,24};
    int wt[] = {1,2,5,6,7};
    int W = 11;
    int n = 5;

    cout<<"\nDynamic Programming:\n";

    auto start = chrono::high_resolution_clock::now();
    int max_pro = knapSack(W, wt, val, n);
    auto stop = chrono::high_resolution_clock::now();
    auto duration = chrono::duration_cast<chrono::nanoseconds>(stop - start);
    cout<<"\nThe Max Profit  is :\t"<<max_pro;

    cout << "\n\nTime: " << duration.count() << " ns" << endl;


    cout<<"\n Recursive Solution:\n";

    auto start1 = chrono::high_resolution_clock::now();
    int max_pro1 = rec(W, wt, val, n);
    auto stop1 = chrono::high_resolution_clock::now();
    auto duration1 = chrono::duration_cast<chrono::nanoseconds>(stop1 - start1);
    cout<<"\nThe Max Profit  is :\t"<<max_pro1;

    cout << "\n\nTime: " << duration1.count() << " ns" << endl;


    return 0;
}